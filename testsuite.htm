<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>PRTG Test Suite</title>
    <script type="text/javascript" src="javascript/lib/jquery.min.js"></script>
    <style>
        /** Font Family and Sizes */
        #qunit-tests, #qunit-header, #qunit-banner, #qunit-testrunner-toolbar, #qunit-userAgent, #qunit-testresult {
            font-family: "Helvetica Neue Light" , "HelveticaNeue-Light" , "Helvetica Neue" , Calibri, Helvetica, Arial;
        }
        #qunit-testrunner-toolbar, #qunit-userAgent, #qunit-testresult, #qunit-tests li {
            font-size: small;
        }
        #qunit-tests {
            font-size: smaller;
        }
        /** Resets */
        #qunit-tests, #qunit-tests ol, #qunit-header, #qunit-banner, #qunit-userAgent, #qunit-testresult {
            margin: 0;
            padding: 0;
        }
        /** Header */
        #qunit-header {
            padding: 0.5em 0 0.5em 1em;
            color: #8699a4;
            background-color: #414455;
            font-size: 1.5em;
            line-height: 1em;
            font-weight: normal;
            border-radius: 15px 15px 0 0;
            -moz-border-radius: 15px 15px 0 0;
            -webkit-border-top-right-radius: 15px;
            -webkit-border-top-left-radius: 15px;
        }

        #qunit-header a {
            text-decoration: none;
            color: #c2ccd1;
        }

        #qunit-header a:hover, #qunit-header a:focus {
            color: #fff;
        }

        #qunit-banner {
            height: 5px;
        }

        #qunit-testrunner-toolbar {
            padding: 0em 0 0.5em 2em;
        }

        #qunit-userAgent {
            padding: 0.5em 0 0.5em 2.5em;
            background-color: #D1D1D1;
            color: #666666;
            text-shadow: rgba(255, 255, 255, 0.5) 2px 2px 1px;
        }
        /** Tests: Pass/Fail */
        #qunit-tests {
            list-style-position: inside;
        }

        #qunit-tests li {
            padding: 0.2em 0.2em 0.2em 1.5em;
            border-bottom: 1px solid #888888;
            list-style-position: inside;
        }

        #qunit-tests li strong {
            cursor: pointer;
        }

        #qunit-tests ol {
            margin-top: 0.2em;
            padding: 0.2em;
            background-color: #fff;
            border-radius: 5px;
            -moz-border-radius: 5px;
            -webkit-border-radius: 5px;
            box-shadow: inset 0px 2px 13px #999;
            -moz-box-shadow: inset 0px 2px 13px #999;
            -webkit-box-shadow: inset 0px 2px 13px #999;
        }

        #qunit-tests table {
            border-collapse: collapse;
            margin-top: .2em;
        }

        #qunit-tests th {
            text-align: right;
            vertical-align: top;
            padding: 0 .5em 0 0;
        }

        #qunit-tests td {
            vertical-align: top;
        }

        #qunit-tests pre {
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        #qunit-tests del {
            background-color: #e0f2be;
            color: #374e0c;
            text-decoration: none;
        }

        #qunit-tests ins {
            background-color: #ffcaca;
            color: #500;
            text-decoration: none;
        }

        /*** Test Counts */
        #qunit-tests b.counts {
            color: black;
        }
        #qunit-tests b.passed {
            color: #5E740B;
        }
        #qunit-tests b.failed {
            color: #710909;
        }

        #qunit-tests li li {
            margin: 0.5em;
            padding: 0.2em 0.2em 0.2em 0.2em;
            background-color: #fff;
            border-bottom: none;
            list-style-position: inside;
        }

        /*** Passing Styles */
        #qunit-tests li li.pass {
            color: #5E740B;
            background-color: #fff;
            border-left: 26px solid #C6E746;
        }

        #qunit-tests .pass {
            color: #000;
            background-color: #EEEEEE;
        }
        #qunit-tests .pass .test-name {
            color: #666666;
        }

        #qunit-tests .pass .test-actual, #qunit-tests .pass .test-expected {
            color: #999999;
        }

        #qunit-banner.qunit-pass {
            background-color: #C6E746;
        }

        /*** Failing Styles */
        #qunit-tests li li.fail {
            color: #710909;
            background-color: #fff;
            border-left: 26px solid #EE5757;
        }

        #qunit-tests .fail {
            color: #000000;
            background-color: #EE5757;
        }
        #qunit-tests .fail .test-name, #qunit-tests .fail .module-name {
            color: #000000;
        }

        #qunit-tests .fail .test-actual {
            color: #EE5757;
        }
        #qunit-tests .fail .test-expected {
            color: green;
        }

        #qunit-banner.qunit-fail, #qunit-testrunner-toolbar {
            background-color: #EE5757;
        }

        /** Footer */
        #qunit-testresult {
            padding: 0.3em 0.3em 0.3em 1.5em;
            background-color: #D1D1D1;
            color: #666666;
            border-radius: 0 0 15px 15px;
            -moz-border-radius: 0 0 15px 15px;
            -webkit-border-bottom-right-radius: 15px;
            -webkit-border-bottom-left-radius: 15px;
        }

        /** Fixture */
        #qunit-fixture {
            position: absolute;
            top: -10000px;
            left: -10000px;
        }
    </style>
    <script type="text/javascript">
        (function (window) {
            var defined = { setTimeout: typeof window.setTimeout !== "undefined", sessionStorage: (function () { try { return !!sessionStorage.getItem; } catch (e) { return false; } })() }
            var testId = 0; var Test = function (name, testName, expected, testEnvironmentArg, async, callback) { this.name = name; this.testName = testName; this.expected = expected; this.testEnvironmentArg = testEnvironmentArg; this.async = async; this.callback = callback; this.assertions = []; }; Test.prototype = { init: function () { var tests = id("qunit-tests"); if (tests) { var b = document.createElement("strong"); b.innerHTML = "Running " + this.name; var li = document.createElement("li"); li.appendChild(b); li.id = this.id = "test-output" + testId++; tests.appendChild(li); } }, setup: function () {
                if (this.module != config.previousModule) {
                    if (this.previousModule) { QUnit.moduleDone(this.module, config.moduleStats.bad, config.moduleStats.all); }
                    config.previousModule = this.module; config.moduleStats = { all: 0, bad: 0 }; QUnit.moduleStart(this.module, this.moduleTestEnvironment);
                }
                config.current = this; this.testEnvironment = extend({ setup: function () { }, teardown: function () { } }, this.moduleTestEnvironment); if (this.testEnvironmentArg) { extend(this.testEnvironment, this.testEnvironmentArg); }
                QUnit.testStart(this.testName, this.testEnvironment); QUnit.current_testEnvironment = this.testEnvironment; try {
                    if (!config.pollution) { saveGlobal(); }
                    this.testEnvironment.setup.call(this.testEnvironment);
                } catch (e) { QUnit.ok(false, "Setup failed on " + this.name + ": " + e.message); }
            }, run: function () {
                if (this.async) { QUnit.stop(); }
                try { this.callback.call(this.testEnvironment); } catch (e) { fail("Test " + this.name + " died, exception and test follows", e, this.callback); QUnit.ok(false, "Died on test #" + (this.assertions.length + 1) + ": " + e.message + " - " + QUnit.jsDump.parse(e)); saveGlobal(); if (config.blocking) { start(); } }
            }, teardown: function () { try { checkPollution(); this.testEnvironment.teardown.call(this.testEnvironment); } catch (e) { QUnit.ok(false, "Teardown failed on " + this.name + ": " + e.message); } }, finish: function () {
                if (this.expected && this.expected != this.assertions.length) { QUnit.ok(false, "Expected " + this.expected + " assertions, but " + this.assertions.length + " were run"); }
                var good = 0, bad = 0, tests = id("qunit-tests"); config.stats.all += this.assertions.length; config.moduleStats.all += this.assertions.length; if (tests) {
                    var ol = document.createElement("ol"); for (var i = 0; i < this.assertions.length; i++) { var assertion = this.assertions[i]; var li = document.createElement("li"); li.className = assertion.result ? "pass" : "fail"; li.innerHTML = assertion.message || (assertion.result ? "okay" : "failed"); ol.appendChild(li); if (assertion.result) { good++; } else { bad++; config.stats.bad++; config.moduleStats.bad++; } }
                    defined.sessionStorage && sessionStorage.setItem("qunit-" + this.testName, bad); if (bad == 0) { ol.style.display = "none"; }
                    var b = document.createElement("strong"); b.innerHTML = this.name + " <b class='counts'>(<b class='failed'>" + bad + "</b>, <b class='passed'>" + good + "</b>, " + this.assertions.length + ")</b>"; addEvent(b, "click", function () { var next = b.nextSibling, display = next.style.display; next.style.display = display === "none" ? "block" : "none"; }); addEvent(b, "dblclick", function (e) {
                        var target = e && e.target ? e.target : window.event.srcElement; if (target.nodeName.toLowerCase() == "span" || target.nodeName.toLowerCase() == "b") { target = target.parentNode; }
                        if (window.location && target.nodeName.toLowerCase() === "strong") { window.location.search = "?" + encodeURIComponent(getText([target]).replace(/\(.+\)$/, "").replace(/(^\s*|\s*$)/g, "")); }
                    }); var li = id(this.id); li.className = bad ? "fail" : "pass"; li.style.display = resultDisplayStyle(!bad); li.removeChild(li.firstChild); li.appendChild(b); li.appendChild(ol); if (bad) { var toolbar = id("qunit-testrunner-toolbar"); if (toolbar) { toolbar.style.display = "block"; id("qunit-filter-pass").disabled = null; } }
                } else { for (var i = 0; i < this.assertions.length; i++) { if (!this.assertions[i].result) { bad++; config.stats.bad++; config.moduleStats.bad++; } } }
                try { QUnit.reset(); } catch (e) { fail("reset() failed, following Test " + this.name + ", exception and reset fn follows", e, QUnit.reset); }
                QUnit.testDone(this.testName, bad, this.assertions.length);
            }, queue: function () {
                var test = this; synchronize(function () { test.init(); }); function run() { synchronize(function () { test.setup(); }); synchronize(function () { test.run(); }); synchronize(function () { test.teardown(); }); synchronize(function () { test.finish(); }); }
                var bad = defined.sessionStorage && +sessionStorage.getItem("qunit-" + this.testName); if (bad) { run(); } else { synchronize(run); };
            }
            }
            var QUnit = { module: function (name, testEnvironment) { config.previousModule = config.currentModule; config.currentModule = name; config.currentModuleTestEnviroment = testEnvironment; }, asyncTest: function (testName, expected, callback) {
                if (arguments.length === 2) { callback = expected; expected = 0; }
                QUnit.test(testName, expected, callback, true);
            }, test: function (testName, expected, callback, async) {
                var name = '<span class="test-name">' + testName + '</span>', testEnvironmentArg; if (arguments.length === 2) { callback = expected; expected = null; }
                if (expected && typeof expected === 'object') { testEnvironmentArg = expected; expected = null; }
                if (config.currentModule) { name = '<span class="module-name">' + config.currentModule + "</span>: " + name; }
                if (!validTest(config.currentModule + ": " + testName)) { return; }
                var test = new Test(name, testName, expected, testEnvironmentArg, async, callback); test.previousModule = config.previousModule; test.module = config.currentModule; test.moduleTestEnvironment = config.currentModuleTestEnviroment; test.queue();
            }, expect: function (asserts) { config.current.expected = asserts; }, ok: function (a, msg) { a = !!a; var details = { result: a, message: msg }; msg = escapeHtml(msg); QUnit.log(a, msg, details); config.current.assertions.push({ result: a, message: msg }); }, equal: function (actual, expected, message) { QUnit.push(expected == actual, actual, expected, message); }, notEqual: function (actual, expected, message) { QUnit.push(expected != actual, actual, expected, message); }, deepEqual: function (actual, expected, message) { QUnit.push(QUnit.equiv(actual, expected), actual, expected, message); }, notDeepEqual: function (actual, expected, message) { QUnit.push(!QUnit.equiv(actual, expected), actual, expected, message); }, strictEqual: function (actual, expected, message) { QUnit.push(expected === actual, actual, expected, message); }, notStrictEqual: function (actual, expected, message) { QUnit.push(expected !== actual, actual, expected, message); }, raises: function (fn, message) {
                try { fn(); QUnit.ok(false, message); }
                catch (e) { QUnit.ok(true, message); }
            }, start: function () {
                if (defined.setTimeout) {
                    window.setTimeout(function () {
                        if (config.timeout) { clearTimeout(config.timeout); }
                        config.blocking = false; process();
                    }, 13);
                } else { config.blocking = false; process(); }
            }, stop: function (timeout) { config.blocking = true; if (timeout && defined.setTimeout) { config.timeout = window.setTimeout(function () { QUnit.ok(false, "Test timed out"); QUnit.start(); }, timeout); } }
            }; QUnit.equals = QUnit.equal; QUnit.same = QUnit.deepEqual; var config = { queue: [], blocking: true }; (function () {
                var location = window.location || { search: "", protocol: "file:" }, GETParams = location.search.slice(1).split('&'); for (var i = 0; i < GETParams.length; i++) { GETParams[i] = decodeURIComponent(GETParams[i]); if (GETParams[i] === "noglobals") { GETParams.splice(i, 1); i--; config.noglobals = true; } else if (GETParams[i].search('=') > -1) { GETParams.splice(i, 1); i--; } }
                config.filters = GETParams; QUnit.isLocal = !!(location.protocol === 'file:');
            })(); if (typeof exports === "undefined" || typeof require === "undefined") { extend(window, QUnit); window.QUnit = QUnit; } else { extend(exports, QUnit); exports.QUnit = QUnit; }
            extend(QUnit, { config: config, init: function () {
                extend(config, { stats: { all: 0, bad: 0 }, moduleStats: { all: 0, bad: 0 }, started: +new Date, updateRate: 1000, blocking: false, autostart: true, autorun: false, filters: [], queue: [] }); var tests = id("qunit-tests"), banner = id("qunit-banner"), result = id("qunit-testresult"); if (tests) { tests.innerHTML = ""; }
                if (banner) { banner.className = ""; }
                if (result) { result.parentNode.removeChild(result); }
            }, reset: function () { if (window.jQuery) { jQuery("#main, #qunit-fixture").html(config.fixture); } else { var main = id('main') || id('qunit-fixture'); if (main) { main.innerHTML = config.fixture; } } }, triggerEvent: function (elem, type, event) { if (document.createEvent) { event = document.createEvent("MouseEvents"); event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView, 0, 0, 0, 0, 0, false, false, false, false, 0, null); elem.dispatchEvent(event); } else if (elem.fireEvent) { elem.fireEvent("on" + type); } }, is: function (type, obj) { return QUnit.objectType(obj) == type; }, objectType: function (obj) {
                if (typeof obj === "undefined") { return "undefined"; }
                if (obj === null) { return "null"; }
                var type = Object.prototype.toString.call(obj).match(/^\[object\s(.*)\]$/)[1] || ''; switch (type) {
                    case 'Number': if (isNaN(obj)) { return "nan"; } else { return "number"; }
                    case 'String': case 'Boolean': case 'Array': case 'Date': case 'RegExp': case 'Function': return type.toLowerCase();
                }
                if (typeof obj === "object") { return "object"; }
                return undefined;
            }, push: function (result, actual, expected, message) {
                var details = { result: result, message: message, actual: actual, expected: expected }; message = escapeHtml(message) || (result ? "okay" : "failed"); message = '<span class="test-message">' + message + "</span>"; expected = escapeHtml(QUnit.jsDump.parse(expected)); actual = escapeHtml(QUnit.jsDump.parse(actual)); var output = message + '<table><tr class="test-expected"><th>Expected: </th><td><pre>' + expected + '</pre></td></tr>'; if (actual != expected) { output += '<tr class="test-actual"><th>Result: </th><td><pre>' + actual + '</pre></td></tr>'; output += '<tr class="test-diff"><th>Diff: </th><td><pre>' + QUnit.diff(expected, actual) + '</pre></td></tr>'; }
                if (!result) { var source = sourceFromStacktrace(); if (source) { details.source = source; output += '<tr class="test-source"><th>Source: </th><td><pre>' + source + '</pre></td></tr>'; } }
                output += "</table>"; QUnit.log(result, message, details); config.current.assertions.push({ result: !!result, message: output });
            }, begin: function () { }, done: function (failures, total) { }, log: function (result, message) { }, testStart: function (name, testEnvironment) { }, testDone: function (name, failures, total) { }, moduleStart: function (name, testEnvironment) { }, moduleDone: function (name, failures, total) { }
            }); if (typeof document === "undefined" || document.readyState === "complete") { config.autorun = true; }
            addEvent(window, "load", function () {
                QUnit.begin(); var oldconfig = extend({}, config); QUnit.init(); extend(config, oldconfig); config.blocking = false; var userAgent = id("qunit-userAgent"); if (userAgent) { userAgent.innerHTML = navigator.userAgent; }
                var banner = id("qunit-header"); if (banner) { var paramsIndex = location.href.lastIndexOf(location.search); if (paramsIndex > -1) { var mainPageLocation = location.href.slice(0, paramsIndex); if (mainPageLocation == location.href) { banner.innerHTML = '<a href=""> ' + banner.innerHTML + '</a> '; } else { var testName = decodeURIComponent(location.search.slice(1)); banner.innerHTML = '<a href="' + mainPageLocation + '">' + banner.innerHTML + '</a> ? <a href="">' + testName + '</a>'; } } }
                var toolbar = id("qunit-testrunner-toolbar"); if (toolbar) { toolbar.style.display = "none"; var filter = document.createElement("input"); filter.type = "checkbox"; filter.id = "qunit-filter-pass"; filter.disabled = true; addEvent(filter, "click", function () { var li = document.getElementsByTagName("li"); for (var i = 0; i < li.length; i++) { if (li[i].className.indexOf("pass") > -1) { li[i].style.display = filter.checked ? "none" : ""; } } }); toolbar.appendChild(filter); var label = document.createElement("label"); label.setAttribute("for", "qunit-filter-pass"); label.innerHTML = "Hide passed tests"; toolbar.appendChild(label); }
                var main = id('main') || id('qunit-fixture'); if (main) { config.fixture = main.innerHTML; }
                if (config.autostart) { QUnit.start(); }
            }); function done() {
                config.autorun = true; if (config.currentModule) { QUnit.moduleDone(config.currentModule, config.moduleStats.bad, config.moduleStats.all); }
                var banner = id("qunit-banner"), tests = id("qunit-tests"), html = ['Tests completed in ', +new Date - config.started, ' milliseconds.<br/>', '<span class="passed">', config.stats.all - config.stats.bad, '</span> tests of <span class="total">', config.stats.all, '</span> passed, <span class="failed">', config.stats.bad, '</span> failed.'].join(''); if (banner) { banner.className = (config.stats.bad ? "qunit-fail" : "qunit-pass"); }
                if (tests) {
                    var result = id("qunit-testresult"); if (!result) { result = document.createElement("p"); result.id = "qunit-testresult"; result.className = "result"; tests.parentNode.insertBefore(result, tests.nextSibling); }
                    result.innerHTML = html;
                }
                QUnit.done(config.stats.bad, config.stats.all);
            }
            function validTest(name) {
                var i = config.filters.length, run = false; if (!i) { return true; }
                while (i--) {
                    var filter = config.filters[i], not = filter.charAt(0) == '!'; if (not) { filter = filter.slice(1); }
                    if (name.indexOf(filter) !== -1) { return !not; }
                    if (not) { run = true; }
                }
                return run;
            }
            function sourceFromStacktrace() { try { throw new Error(); } catch (e) { if (e.stacktrace) { return e.stacktrace.split("\n")[6]; } else if (e.stack) { return e.stack.split("\n")[4]; } } }
            function resultDisplayStyle(passed) { return passed && id("qunit-filter-pass") && id("qunit-filter-pass").checked ? 'none' : ''; }
            function escapeHtml(s) {
                if (!s) { return ""; }
                s = s + ""; return s.replace(/[\&"<>\\]/g, function (s) { switch (s) { case "&": return "&"; case "\\": return "\\\\"; case '"': return '\"'; case "<": return "<"; case ">": return ">"; default: return s; } });
            }
            function synchronize(callback) { config.queue.push(callback); if (config.autorun && !config.blocking) { process(); } }
            function process() {
                var start = (new Date()).getTime(); while (config.queue.length && !config.blocking) { if (config.updateRate <= 0 || (((new Date()).getTime() - start) < config.updateRate)) { config.queue.shift()(); } else { window.setTimeout(process, 13); break; } }
                if (!config.blocking && !config.queue.length) { done(); }
            }
            function saveGlobal() { config.pollution = []; if (config.noglobals) { for (var key in window) { config.pollution.push(key); } } }
            function checkPollution(name) {
                var old = config.pollution; saveGlobal(); var newGlobals = diff(old, config.pollution); if (newGlobals.length > 0) { ok(false, "Introduced global variable(s): " + newGlobals.join(", ")); config.current.expected++; }
                var deletedGlobals = diff(config.pollution, old); if (deletedGlobals.length > 0) { ok(false, "Deleted global variable(s): " + deletedGlobals.join(", ")); config.current.expected++; }
            }
            function diff(a, b) {
                var result = a.slice(); for (var i = 0; i < result.length; i++) { for (var j = 0; j < b.length; j++) { if (result[i] === b[j]) { result.splice(i, 1); i--; break; } } }
                return result;
            }
            function fail(message, exception, callback) { if (typeof console !== "undefined" && console.error && console.warn) { console.error(message); console.error(exception); console.warn(callback.toString()); } else if (window.opera && opera.postError) { opera.postError(message, exception, callback.toString); } }
            function extend(a, b) {
                for (var prop in b) { a[prop] = b[prop]; }
                return a;
            }
            function addEvent(elem, type, fn) { if (elem.addEventListener) { elem.addEventListener(type, fn, false); } else if (elem.attachEvent) { elem.attachEvent("on" + type, fn); } else { fn(); } }
            function id(name) { return !!(typeof document !== "undefined" && document && document.getElementById) && document.getElementById(name); }
            QUnit.equiv = function () {
                var innerEquiv; var callers = []; var parents = []; function bindCallbacks(o, callbacks, args) { var prop = QUnit.objectType(o); if (prop) { if (QUnit.objectType(callbacks[prop]) === "function") { return callbacks[prop].apply(callbacks, args); } else { return callbacks[prop]; } } }
                var callbacks = function () {
                    function useStrictEquality(b, a) { if (b instanceof a.constructor || a instanceof b.constructor) { return a == b; } else { return a === b; } }
                    return { "string": useStrictEquality, "boolean": useStrictEquality, "number": useStrictEquality, "null": useStrictEquality, "undefined": useStrictEquality, "nan": function (b) { return isNaN(b); }, "date": function (b, a) { return QUnit.objectType(b) === "date" && a.valueOf() === b.valueOf(); }, "regexp": function (b, a) { return QUnit.objectType(b) === "regexp" && a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline; }, "function": function () { var caller = callers[callers.length - 1]; return caller !== Object && typeof caller !== "undefined"; }, "array": function (b, a) {
                        var i, j, loop; var len; if (!(QUnit.objectType(b) === "array")) { return false; }
                        len = a.length; if (len !== b.length) { return false; }
                        parents.push(a); for (i = 0; i < len; i++) {
                            loop = false; for (j = 0; j < parents.length; j++) { if (parents[j] === a[i]) { loop = true; } }
                            if (!loop && !innerEquiv(a[i], b[i])) { parents.pop(); return false; }
                        }
                        parents.pop(); return true;
                    }, "object": function (b, a) {
                        var i, j, loop; var eq = true; var aProperties = [], bProperties = []; if (a.constructor !== b.constructor) { return false; }
                        callers.push(a.constructor); parents.push(a); for (i in a) {
                            loop = false; for (j = 0; j < parents.length; j++) {
                                if (parents[j] === a[i])
                                    loop = true;
                            }
                            aProperties.push(i); if (!loop && !innerEquiv(a[i], b[i])) { eq = false; break; }
                        }
                        callers.pop(); parents.pop(); for (i in b) { bProperties.push(i); }
                        return eq && innerEquiv(aProperties.sort(), bProperties.sort());
                    }
                    };
                } (); innerEquiv = function () {
                    var args = Array.prototype.slice.apply(arguments); if (args.length < 2) { return true; }
                    return (function (a, b) { if (a === b) { return true; } else if (a === null || b === null || typeof a === "undefined" || typeof b === "undefined" || QUnit.objectType(a) !== QUnit.objectType(b)) { return false; } else { return bindCallbacks(a, callbacks, [b, a]); } })(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length - 1));
                }; return innerEquiv;
            } (); QUnit.jsDump = (function () {
                function quote(str) { return '"' + str.toString().replace(/"/g, '\\"') + '"'; }; function literal(o) { return o + ''; }; function join(pre, arr, post) {
                    var s = jsDump.separator(), base = jsDump.indent(), inner = jsDump.indent(1); if (arr.join)
                        arr = arr.join(',' + s + inner); if (!arr)
                        return pre + post; return [pre, inner + arr, base + post].join(s);
                }; function array(arr) {
                    var i = arr.length, ret = Array(i); this.up(); while (i--)
                        ret[i] = this.parse(arr[i]); this.down(); return join('[', ret, ']');
                }; var reName = /^function (\w+)/; var jsDump = { parse: function (obj, type) { var parser = this.parsers[type || this.typeOf(obj)]; type = typeof parser; return type == 'function' ? parser.call(this, obj) : type == 'string' ? parser : this.parsers.error; }, typeOf: function (obj) {
                    var type; if (obj === null) { type = "null"; } else if (typeof obj === "undefined") { type = "undefined"; } else if (QUnit.is("RegExp", obj)) { type = "regexp"; } else if (QUnit.is("Date", obj)) { type = "date"; } else if (QUnit.is("Function", obj)) { type = "function"; } else if (typeof obj.setInterval !== undefined && typeof obj.document !== "undefined" && typeof obj.nodeType === "undefined") { type = "window"; } else if (obj.nodeType === 9) { type = "document"; } else if (obj.nodeType) { type = "node"; } else if (typeof obj === "object" && typeof obj.length === "number" && obj.length >= 0) { type = "array"; } else { type = typeof obj; }
                    return type;
                }, separator: function () { return this.multiline ? this.HTML ? '<br />' : '\n' : this.HTML ? '?' : ' '; }, indent: function (extra) {
                    if (!this.multiline)
                        return ''; var chr = this.indentChar; if (this.HTML)
                        chr = chr.replace(/\t/g, '   ').replace(/ /g, '?'); return Array(this._depth_ + (extra || 0)).join(chr);
                }, up: function (a) { this._depth_ += a || 1; }, down: function (a) { this._depth_ -= a || 1; }, setParser: function (name, parser) { this.parsers[name] = parser; }, quote: quote, literal: literal, join: join, _depth_: 1, parsers: { window: '[Window]', document: '[Document]', error: '[ERROR]', unknown: '[Unknown]', 'null': 'null', undefined: 'undefined', 'function': function (fn) {
                    var ret = 'function', name = 'name' in fn ? fn.name : (reName.exec(fn) || [])[1]; if (name)
                        ret += ' ' + name; ret += '('; ret = [ret, QUnit.jsDump.parse(fn, 'functionArgs'), '){'].join(''); return join(ret, QUnit.jsDump.parse(fn, 'functionCode'), '}');
                }, array: array, nodelist: array, arguments: array, object: function (map) {
                    var ret = []; QUnit.jsDump.up(); for (var key in map)
                        ret.push(QUnit.jsDump.parse(key, 'key') + ': ' + QUnit.jsDump.parse(map[key])); QUnit.jsDump.down(); return join('{', ret, '}');
                }, node: function (node) {
                    var open = QUnit.jsDump.HTML ? '<' : '<', close = QUnit.jsDump.HTML ? '>' : '>'; var tag = node.nodeName.toLowerCase(), ret = open + tag; for (var a in QUnit.jsDump.DOMAttrs) {
                        var val = node[QUnit.jsDump.DOMAttrs[a]]; if (val)
                            ret += ' ' + a + '=' + QUnit.jsDump.parse(val, 'attribute');
                    }
                    return ret + close + open + '/' + tag + close;
                }, functionArgs: function (fn) {
                    var l = fn.length; if (!l) return ''; var args = Array(l); while (l--)
                        args[l] = String.fromCharCode(97 + l); return ' ' + args.join(', ') + ' ';
                }, key: quote, functionCode: '[code]', attribute: quote, string: quote, date: quote, regexp: literal, number: literal, 'boolean': literal
                }, DOMAttrs: { id: 'id', name: 'name', 'class': 'className' }, HTML: false, indentChar: '  ', multiline: true
                }; return jsDump;
            })(); function getText(elems) {
                var ret = "", elem; for (var i = 0; elems[i]; i++) { elem = elems[i]; if (elem.nodeType === 3 || elem.nodeType === 4) { ret += elem.nodeValue; } else if (elem.nodeType !== 8) { ret += getText(elem.childNodes); } }
                return ret;
            }; QUnit.diff = (function () {
                function diff(o, n) {
                    var ns = new Object(); var os = new Object(); for (var i = 0; i < n.length; i++) {
                        if (ns[n[i]] == null)
                            ns[n[i]] = { rows: new Array(), o: null }; ns[n[i]].rows.push(i);
                    }
                    for (var i = 0; i < o.length; i++) {
                        if (os[o[i]] == null)
                            os[o[i]] = { rows: new Array(), n: null }; os[o[i]].rows.push(i);
                    }
                    for (var i in ns) { if (ns[i].rows.length == 1 && typeof (os[i]) != "undefined" && os[i].rows.length == 1) { n[ns[i].rows[0]] = { text: n[ns[i].rows[0]], row: os[i].rows[0] }; o[os[i].rows[0]] = { text: o[os[i].rows[0]], row: ns[i].rows[0] }; } }
                    for (var i = 0; i < n.length - 1; i++) { if (n[i].text != null && n[i + 1].text == null && n[i].row + 1 < o.length && o[n[i].row + 1].text == null && n[i + 1] == o[n[i].row + 1]) { n[i + 1] = { text: n[i + 1], row: n[i].row + 1 }; o[n[i].row + 1] = { text: o[n[i].row + 1], row: i + 1 }; } }
                    for (var i = n.length - 1; i > 0; i--) { if (n[i].text != null && n[i - 1].text == null && n[i].row > 0 && o[n[i].row - 1].text == null && n[i - 1] == o[n[i].row - 1]) { n[i - 1] = { text: n[i - 1], row: n[i].row - 1 }; o[n[i].row - 1] = { text: o[n[i].row - 1], row: i - 1 }; } }
                    return { o: o, n: n };
                }
                return function (o, n) {
                    o = o.replace(/\s+$/, ''); n = n.replace(/\s+$/, ''); var out = diff(o == "" ? [] : o.split(/\s+/), n == "" ? [] : n.split(/\s+/)); var str = ""; var oSpace = o.match(/\s+/g); if (oSpace == null) { oSpace = [" "]; }
                    else { oSpace.push(" "); }
                    var nSpace = n.match(/\s+/g); if (nSpace == null) { nSpace = [" "]; }
                    else { nSpace.push(" "); }
                    if (out.n.length == 0) { for (var i = 0; i < out.o.length; i++) { str += '<del>' + out.o[i] + oSpace[i] + "</del>"; } }
                    else {
                        if (out.n[0].text == null) { for (n = 0; n < out.o.length && out.o[n].text == null; n++) { str += '<del>' + out.o[n] + oSpace[n] + "</del>"; } }
                        for (var i = 0; i < out.n.length; i++) {
                            if (out.n[i].text == null) { str += '<ins>' + out.n[i] + nSpace[i] + "</ins>"; }
                            else {
                                var pre = ""; for (n = out.n[i].row + 1; n < out.o.length && out.o[n].text == null; n++) { pre += '<del>' + out.o[n] + oSpace[n] + "</del>"; }
                                str += " " + out.n[i].text + nSpace[i] + pre;
                            }
                        }
                    }
                    return str;
                };
            })();
        })(this);
        //---------------------------------------------------------------------------------------------------------------------------------//

        typeOf = function (t) {
            return String(t.constructor).split(" ")[1].split("()").join("");
        }

        var prtgApi = function () {
            // Private region

            sendApiRequest = function (url, data, method, callback, async) {
                if (typeof (data) === "object" && typeOf(data) === "Object") {
                    var args;
                    for (key in data) {
                        if (typeof (args) === 'undefined') {
                            args = key + "=" + data[key];
                        } else {
                            args += "&";
                            args += key + "=" + data[key];
                        }
                    }
                    data = args;
                }
                $.ajax({
                    url: url,
                    data: data,
                    type: method,
                    success: callback,
                    error: function (xhr, options, thrownError) {
                        //alert(xhr.statusText + " >< " + xhr.status + " === " + url);
                        callback(xhr.status);
                    }
                });

                return false;
            }

            scanObjectNow = function (objectId, callback) {
                sendApiRequest("/api/scannow.htm", "id=" + objectId, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            discoverNow = function (objectId, callback) {
                sendApiRequest("/api/discovernow.htm", "id=" + objectId, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            setObjectProperty = function (objectId, propertyName, propertyValue, callback) {
                var args = {
                    id: objectId,
                    name: propertyName,
                    value: propertyValue
                };
                sendApiRequest("/api/setobjectproperty.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            getObjectProperty = function (objectId, propertyName, show, callback) {
                var args = {
                    id: objectId,
                    name: propertyName,
                    show: show
                };
                sendApiRequest("/api/getobjectproperty.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            getObjectStatus = function (objectId, columnName, show, callback) {
                var args = {
                    id: objectId,
                    name: columnName,
                    show: show
                };
                sendApiRequest("/api/getobjectstatus.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            getSensorDetails = function (sensorId, callback) {
                sendApiRequest("/api/getsensordetails.xml", "id=" + sensorId, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            renameObject = function (objectId, newName, callback) {
                var args = {
                    id: objectId,
                    value: newName
                };
                sendApiRequest("/api/rename.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            setObjectPriority = function (objectId, priority, callback) {
                var args = {
                    id: objectId,
                    prio: priority
                }
                sendApiRequest("/api/setpriority.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            setObjectPause = function (objectId, action, duration, callback) {
                //action 0 = pause; 1 = resume
                //duartion 0 = beliebig lang
                if (duration === 0) {
                    var args = {
                        id: objectId,
                        action: action
                    };
                    var url = "/api/pause.htm";
                } else {
                    var args = {
                        id: objectId,
                        duration: duration
                    };
                    var url = "/api/pauseobjectfor.htm";
                }
                sendApiRequest(url, args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            pauseObjectFor = function (objectId, duration, callback) {
                setObjectPause(objectId, 0, duration, callback);
                return false;
            }

            resumeObject = function (objectid, callback) {
                setObjectPause(objectId, 1, callback);
                return false;
            }

            pauseObject = function (objectId, callback) {
                setObjectPause(objectId, 0, callback);
                return false;
            }

            setObjectFavorite = function (objectId, action, callback) {
                //action 1 = isfavorite; 0 = normal
                sendApiRequest("/api/fave.htm", "id=" + objectId + "&action=" + action, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            favoriteObject = function (objectId, callback) {
                setObjectFavorite(objectId, 1, callback);
                return false;
            }

            removeFavoriteObject = function (objectId, callback) {
                setObjectFavorite(objectId, 0, callback);
                return false;
            }

            simulateError = function (objectId, callback) {
                var args = {
                    id: objectId,
                    action: 1
                };
                sendApiRequest("/api/simulate.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            acknowledgeError = function (objectId, message, callback) {
                var args = {
                    id: objectId,
                    ackmsg: message
                };
                sendApiRequest("/api/acknowledgealarm.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            setPosition = function (objectId, newPos, callback) {
                //possible newPos values: up, down, top, bottom
                var args = {
                    id: objectId,
                    newpos: newPos
                };
                sendApiRequest("/api/setposition.htm", args, "GET", function (repsonse) {
                    callback(response);
                });
                return false;
            }

            addObjectToReport = function (objectId, reportId, callback) {
                var args = {
                    id: reportId,
                    addid: objectId
                };
                sendApiRequest("/api/reportaddsensor.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            testObjectNotification = function (objectId, callback) {
                sendApiRequest("/api/notifictiontest.htm", "id=" + objectId, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            deleteObject = function (objectId, callback) {
                var args = {
                    id: objectId,
                    approve: 1
                };
                sendApiRequest("/api/deleteobject.htm", args, "GET", function (response) {
                    callback(response);
                });
                return false;
            }

            // Public region
            return {
                sendApiRequest: sendApiRequest,
                scanObjectNow: scanObjectNow,
                discoverNow: discoverNow,
                setObjectProperty: setObjectProperty,
                getObjectProperty: getObjectProperty,
                getObjectStatus: getObjectStatus,
                getSensorDetails: getSensorDetails,
                renameObject: renameObject,
                setObjectPriority: setObjectPriority,
                favoriteObject: favoriteObject,
                removeFavoriteObject: removeFavoriteObject,
                setObjectFavorite: setObjectFavorite,
                pauseObjectFor: pauseObjectFor,
                resumeObject: resumeObject,
                pauseObject: pauseObject,
                setObjectPause: setObjectPause,
                simulateError: simulateError,
                acknowledgeError: acknowledgeError,
                setPosition: setPosition,
                addObjectToReport: addObjectToReport,
                testObjectNotification: testObjectNotification,
                deleteObject: deleteObject
            }
        } ();


        var testSuite = {
            favoriteObjectTest: function (objectId, type, action) {

                var testMsg;
                if (action === 1) {
                    testMsg = "Adding object (id: " + objectId + ") to favorites";
                } else {
                    testMsg = "Remove object (id: " + objectId + ") from favorites";
                }
                asyncTest(testMsg, 3, function () {
                    var startTime = (new Date).getTime();
                    prtgApi.setObjectFavorite(objectId, action, function (respsone) {
                        var diff = (new Date).getTime() - startTime;
                        ok(true, "Favorite api call done! (completed in " + diff + " milliseconds.)");
                        var i = 0, objid, isFavorite = 0;
                        loop = function () {
                            setTimeout(function () {
                                i++;
                                startTime = (new Date).getTime();
                                prtgApi.sendApiRequest("/api/table.xml", "content=" + type + "&output=xml&columns=objid,favorite&id=1&filter_objid=" + objectId, "GET", function (data) {
                                    diff = (new Date).getTime() - startTime;
                                    $(data).find("item").each(function () {
                                        objid = $(this).find("objid").text();
                                        isFavorite = $(this).find("favorite_raw").text();
                                        if (Number(isFavorite) === action || i === 60) {
                                            equals(Number(objid), Number(objectId), "Correct objid in response ");
                                            equals(Number(isFavorite), action, "Is a Favorite in response. (completed in " + diff + " milliseconds (requests: " + i + ").)");
                                            start();
                                        } else {
                                            loop();
                                        }
                                    });
                                });
                            }, 500);
                        };
                        loop();
                    });
                });
            },

            favoriteSensorTest: function (objectId) {
                var argc = arguments.length;
                while (argc--) {
                    this.favoriteObjectTest(arguments[argc], "sensor", 1);
                    this.favoriteObjectTest(arguments[argc], "sensor", 0);
                }
            },

            favoriteDeviceTest: function (objectId) {
                var argc = arguments.length;
                while (argc--) {
                    this.favoriteObjectTest(arguments[argc], "devices", 1);
                    this.favoriteObjectTest(arguments[argc], "devices", 0);
                }
            },

            pauseTest: function (objectId, action, duration) {
                var result;
                var testMsg;
                switch (action) {
                    case 1:
                        result = 3;
                        testMsg = "Continue object. (id: " + objectId + ")";
                        break;
                    case 0:
                        if (duration > 0) {
                            result = 12;
                            testMsg = "Pause object for " + duration + "seconds. (id: " + objectId + ")";
                        } else {
                            result = 7;
                            testMsg = "Pause object. (id: " + objectId + ")";
                        }
                        break;
                };
                asyncTest(testMsg, 2, function () {
                    var startTime = (new Date).getTime();
                    prtgApi.setObjectPause(objectId, action, duration, function () {
                        var diff = (new Date).getTime() - startTime;
                        ok(true, "Pause/Resume api call done! (completed in " + diff + " milliseconds.)");
                        var i = 0, objid, isPaused = 0;
                        loop = function () {
                            setTimeout(function () {
                                i++;
                                startTime = (new Date).getTime();
                                prtgApi.getObjectStatus(objectId, "status", "textraw", function (response) {
                                    diff = (new Date).getTime() - startTime;
                                    isPaused = $(response).find("result").text();
                                    if (Number(isPaused) === result || i === 60) {
                                        equals(Number(isPaused), result, "Correct status in response. (completed in " + diff + " milliseconds (requests: " + i + ").)");
                                        start();
                                    } else {
                                        loop();
                                    }
                                });
                            }, 500);
                        }
                        prtgApi.scanObjectNow(objectId, function () { });
                        loop();
                    });
                });

            },

            pauseObjectTest: function (objectId) {
                var argc = arguments.length;
                while (argc--) {
                    this.pauseTest(arguments[argc], 0, 0);
                    this.pauseTest(arguments[argc], 1, 0);
                    this.pauseTest(arguments[argc], 0, 300);
                    this.pauseTest(arguments[argc], 1, 0);
                }
            },

            priorityTest: function (objectId, priority) {
                asyncTest("Set priority of object (id: " + objectId + ") to " + priority + ".", 2, function () {
                    var startTime = (new Date).getTime();
                    prtgApi.setObjectPriority(objectId, priority, function () {
                        var diff = (new Date).getTime() - startTime;
                        ok(true, "Priority api call done! (completed in " + diff + " milliseconds.)");
                        var i = 0, newPriority;
                        loop = function () {
                            setTimeout(function () {
                                i++;
                                startTime = (new Date).getTime();
                                prtgApi.getObjectProperty(objectId, "priority", "number", function (response) {
                                    diff = (new Date).getTime() - startTime;
                                    newPriority = $(response).find("result").text();
                                    if (Number(newPriority) === priority || i === 60) {
                                        equals(Number(newPriority), priority, "Correct priority in response. (completed in " + diff + " milliseconds (requests: " + i + ").)");
                                        start();
                                    } else {
                                        loop();
                                    }
                                });
                            }, 500);
                        }
                        prtgApi.scanObjectNow(objectId, function () { });
                        loop();
                    });
                });
            },

            priorityObjectTest: function (objectId) {
                var argc = arguments.length;
                while (argc--) {
                    var i = 6;
                    while (i--) {
                        if (i > 0) {
                            this.priorityTest(arguments[argc], i);
                        }
                    }
                }
            },

            simulateErrorTest: function (objectId) {
                asyncTest("Simulate error (id: " + objectId + ")", 2, function () {
                    prtgApi.getObjectStatus(objectId, "status", "textraw", function (response) {
                        if (Number($(response).find("result").text()) !== 3) {
                            ok(false, "Sensor status is not up (3)! Status up for this test needed!");
                            start();
                        } else {
                            var startTime = (new Date).getTime();
                            prtgApi.simulateError(objectId, function () {
                                var diff = (new Date).getTime() - startTime;
                                ok(true, "Simulate error api call done! (completed in " + diff + " milliseconds.)");
                                var i = 0, newStatus;
                                loop = function () {
                                    setTimeout(function () {
                                        i++;
                                        startTime = (new Date).getTime();
                                        prtgApi.getObjectStatus(objectId, "status", "textraw", function (response) {

                                            newStatus = $(response).find("result").text();
                                            if (Number(newStatus) === 5 || i === 60) {
                                                diff = (new Date).getTime() - startTime;
                                                equals(Number(newStatus), 5, "Correct status for sensorid " + objectId + " (down). (completed in " + diff + " milliseconds (requests: " + i + ").)");
                                                start();
                                            } else {
                                                loop();
                                            }
                                        });
                                    }, 1000);
                                }
                                prtgApi.scanObjectNow(objectId, function () { });
                                loop();
                            });
                        }
                    });
                });
            },

            simulateSensorErrorTest: function (objectId) {
                var argc = arguments.length;
                while (argc--) {
                    this.simulateErrorTest(arguments[argc]);
                    this.pauseTest(arguments[argc], 1, 0);
                }
            },

            chartTest: function (objectId) {
                asyncTest("Loading chart for id " + objectId, 1, function () {
                    var startTime = (new Date).getTime();
                    image = new Image();
                    image.src = "chart.png?type=graph&width=300&height=160&graphid=2&id=" + objectId;
                    image.onload = function () {
                        var diff = (new Date).getTime() - startTime;
                        ok(true, "Chart for id " + objectId + " loaded! (" + diff + " milliseconds)");
                        start();
                    };
                    image.onerror = function () {
                        ok(false, "Chart for id " + objectId + " load error!");
                        start();
                    };
                    image.onabort = function () {
                        ok(false, "Chart for id " + objectId + " load aborted!");
                        start();
                    };

                });
            },

            objectChartTest: function (objectId) {
                var argc = arguments.length;
                while (argc--) {
                    this.chartTest(arguments[argc]);
                }
            },

            addGroupTest: function (parentId, name, tags, callback) {
                asyncTest("Addgroup test (name:" + name + " parent: " + parentId + ")", 5, function () {
                    var args = {
                        id: parentId,
                        discoverytype_: 0,
                        name_: name,
                        tags_: tags,
                        windowsconnection: 1,
                        linuxconnection: 1,
                        vmwareconnection: 1,
                        snmpversiongroup: 1
                    }
                    sendApiRequest("addgroup2.htm", args, "POST", function (response) {
                        ok(true, 'Addgroup call done');
                        sendApiRequest("/api/table.xml", "content=messages&output=xml&columns=objid,status,type&count=2", "GET", function (data) {
                            $(data).find("item").each(function (i) {
                                if (i === 0) {
                                    var objid_parent = $(this).find("objid").text();
                                    var status = $(this).find("status_raw").text();
                                    equals(Number(objid_parent), parentId, 'Correct parent id in Log');
                                    equals(Number(status), 505, 'Correct status (505 = new child object)');
                                } else if (i === 1) {
                                    var objid = $(this).find("objid").text();
                                    var status = $(this).find("status_raw").text();
                                    var type = $(this).find("type_raw").text();
                                    equals(type, "group", 'Correct type is used');
                                    equals(Number(status), 618, 'Correct status (501 = new object added; new id: ' + objid + ')');
                                    newGroupId = objid;
                                    callback(newGroupId);
                                    start();
                                }
                            });
                        });
                    });
                });
            },

            addDeviceTest: function (parentId, name, host, tags, callback) {
                asyncTest('Add device (Name: ' + name + ' parent: ' + parentId + ')', 5, function () {
                    var args = {
                        id: parentId,
                        name_: name,
                        Host_: host,
                        tags_: tags,
                        deviceicon_: "a_server_1.png",
                        discoverytype_: 0,
                        devicetemplate_: 1,
                        discoveryschedule_: 0,
                        windowsconnection: 1,
                        //windowslogindomain_: "",
                        //windowsloginusername_: "",
                        //windowsloginpassword_: "",
                        linuxconnection: 1,
                        vmwareconnection: 1,
                        snmpversiongroup: 1
                    }
                    sendApiRequest("adddevice2.htm", args, "POST", function (data) {
                        ok(true, "Adddevice call done");
                        sendApiRequest("/api/table.xml", "content=messages&output=xml&columns=objid,status,type&count=2", "GET", function (data) {
                            $(data).find("item").each(function (i) {
                                if (i === 0) {
                                    var objid_parent = $(this).find("objid").text();
                                    var status = $(this).find("status_raw").text();
                                    equals(Number(objid_parent), Number(parentId), 'Correct parent id in Log');
                                    equals(Number(status), 505, 'Correct status (505 = new child object)');
                                } else if (i === 1) {
                                    var objid = $(this).find("objid").text();
                                    var status = $(this).find("status_raw").text();
                                    var type = $(this).find("type_raw").text();
                                    equals(Number(status), 618, 'Correct status (501 = new object added; new id: ' + objid + ')');
                                    equals(type, "device", "Correct type in log (device)");

                                    callback(objid);
                                    start();
                                }

                            });
                        });

                    });

                });
            },

            addSensorTest: function (type, parentId, args, logtype) {
                sendApiRequest("addsensor5.htm", args, "POST", function (data) {
                    ok(true, "Add sensor call done (Parent: " + parentId + ")");
                    if ($(data).find(".errormsg").length > 0) {
                        ok(false, "Received a Error!!!");
                        start();
                    } else {
                        sendApiRequest("/api/table.xml", "content=messages&output=xml&columns=objid,status,type&count=2", "GET", function (data) {
                            $(data).find("item").each(function (i) {
                                if (i === 0) {
                                    var objid_parent = $(this).find("objid").text();
                                    var status = $(this).find("status_raw").text();
                                    equals(Number(objid_parent), Number(parentId), "Correct parent id in Log");
                                    equals(Number(status), 505, 'Correct status (505 = new child object)');
                                } else if (i === 1) {
                                    var objid = $(this).find("objid").text();
                                    var status = $(this).find("status_raw").text();
                                    var log_type = $(this).find("type_raw").text();
                                    equals(log_type, type, 'Correct type is used');
                                    equals(Number(status), 601, 'Correct status (501 = new object added; new id: ' + objid + ')');

                                    start();
                                }
                            });
                        });
                    }
                });
            },

            addCustomSensorTest: function (parentID, name, tags, type, logtype, optargs) {
                asyncTest("Add Custom sensor (Type: " + type + " Name: " + name + " parent: " + parentID + ")", 5, function () {
                    var args = {
                        id: parentID,
                        sensortype: type
                    }
                    if(optargs) {
                        for (argument in optargs) {
                            args[argument] = optargs[argument];
                        }
                    }
                    testSuite.addSensorTest(logtype, parentID, args);
                });
            },

            deleteGroup: function (id) {
                asyncTest("Delete Group (Groupid: " + id + ")", 1, function () {
                    deleteObject(id, function () {
                        sendApiRequest("/api/table.xml", "content=messages&output=xml&columns=objid,status,type&count=1", "GET", function (data) {
                            $(data).find("item").each(function (i) {
                                var status = $(this).find("status_raw").text();
                                equals(Number(status), 506, 'Correct status (506 = child object deleted)');
                                start();
                            });
                        });
                    });
                });
            }
        }

        $(function () {
            $.urlParam = function (name) {
                var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
                if (results != null) {
                    return results[1] || 0;
                } else {
                    return '';
                }
            }


            QUnit.begin = function () {
                //runningIndicator = setInterval(function() {
                //	$("#progress").append(".");
                //}, 400);
            };
            var oldQunitDone = QUnit.done;
            QUnit.done = function () {
                //clearInterval(runningIndicator);
                $("#progress").append(" done!");
                $('html, body').animate({
                    scrollTop: $(document).height()
                }, 1000);
            };
            var num = 0;
            var testId;

            function scrollGo(elm) {
                var x = $(elm).offset().top - 100;
                $('html,body').animate({ scrollTop: x }, 500);
            }
            QUnit.testStart = function (name) {
                //var winHeight = $(window).height();
                //var newpos = $(window).scrollTop() + $("#qunit-tests>li").outerHeight(true);
                //if(winHeight < $("#qunit-tests>li:eq("+ num +")").offset().top + $("#qunit-tests>li").outerHeight(true)) {
                //	$('html, body').animate({
                //		scrollTop: newpos
                //	}, 200);
                //}
                var punkte = 0;
                scrollGo("#qunit-tests>li:eq(" + num + ")");
                testId = "#test-output" + num;
                $(testId).append('<span class="pointindie"></span>');
                num++;
                runningTestIndicator = setInterval(function () {
                    if (punkte < 20) {
                        $(testId + " .pointindie").append(".");
                    } else {
                        $(testId + " .pointindie").html('');
                        punkte = 0;
                    }
                    punkte++;
                }, 100);
            };
            QUnit.testDone = function (name, failures, total) {
                $(".pointindie").remove();
                clearInterval(runningTestIndicator);
            };
            function dotest() {
                $("#testcontainer").show();
                if ($.urlParam('graphtest') === "y") {
                    module("Chart test");
                    testSuite.objectChartTest(1001, 1002,  40, 1);
                }

                if ($.urlParam('favtest') === "y") {
                    module("Object favorite test");
                    testSuite.favoriteSensorTest(1001, 1002);
                    testSuite.favoriteDeviceTest(40);
                }

                if ($.urlParam('pausetest') === "y") {
                    module("Object pause test");
                    testSuite.pauseObjectTest(1001, 40, 1);
                }

                if ($.urlParam('prioritytest') === "y") {
                    module("Object priority test");
                    testSuite.priorityObjectTest(1001, 40, 1);
                }

                if ($.urlParam('errortest') === "y") {
                    module("Simulate error");
                    testSuite.simulateSensorErrorTest(1002);
                }
            }
            $("#testcontainer").hide();

            if ($.urlParam('starttest') === "Run") {
                $("#selecttests").hide();
                dotest();
            }

        })
    </script>
</head>
<body>
    <div id="selecttests">
        <form method="GET">
        <input type="checkbox" name="graphtest" value="y" checked>
        Graph test<br>
        <input type="checkbox" name="favtest" value="y" checked>
        Object favorite test<br>
        <input type="checkbox" name="pausetest" value="y" checked>
        Object pause test<br>
        <input type="checkbox" name="prioritytest" value="y" checked>
        Object priority test<br>
        <input type="checkbox" name="errortest" value="y" checked>
        Simulate error test<br>
<!--         <input type="checkbox" name="menutest" value="y" checked>
        Menu links test<br> -->
<!--         <input type="checkbox" name="addgdstest" value="y" checked>
        Add groupd/device/sensor test<br> -->
        <input type="submit" name="starttest" value="Run">
        </form>
    </div>
    <div id="testcontainer">
        <h1 id="qunit-header">
            PRTG API Test Suite<span id="progress"></span></h1>
        <h2 id="qunit-banner">
        </h2>
        <div id="qunit-testrunner-toolbar">
        </div>
        <h2 id="qunit-userAgent">
        </h2>
        <ol id="qunit-tests">
        </ol>
    </div>
</body>
</html>
